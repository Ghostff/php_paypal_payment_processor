%m0%
require_once('%m1%');
/*
---- PAYMENT PARAMS FOR DONATION ------
@param 1 payment type (default 'donate')
@param 2 your paypal business or personal email address
@param 3 Name of item users will be donating for (default 'homeless kids funding' )
@param 4 The URL to which PayPal redirects buyers' browser after they complete their payments (**CHNAGE THIS )
@param 5 The URL to which PayPal redirects buyers' browser if they canceled their payments (**CHNAGE THIS )
@param 6 Error return type if(array(error will be retruned as array)) if(string(errror will be return as string)) if null (no error will be returned) default (string)
*/
$pay = new %m2%(PP_EMAIL, 'homeless kids funding', PP_SUCCESS, PP_CANCELED, 'string');
/*
---------- USER DEFINED DATA FOR DONATION -------------------
@param 1  currency type eg("USD", "EUR", "GBP", "CAD", "JPY")
@param 2  ammount eg(50, 55.5, 99.99)
@param 3  first name(A-Z) only
@param 4  last name(A_Z) only
@param 5  email address
@param 6  address 1
@param 7  address 2(optional: null)
@param 8  city name
@param 9  state name(2 letters abbreviation) eg('mx', 'tx', 'lg')
@param 10 zip code eg('7765', '4454', 'S4422')
@param 11 country name(2 letters abbreviation) eg('ng', 'us', 'bg')
@param 12 phone 1 Area code eg(123, 234, 345)  (optional: null)
@param 13 phone 1 number eg('5518727323', '0802783893', '081237833767')  (optional: null)
@param 14 phone 2 Area code eg(123, 234, 345)  (optional: null)
@param 15 phone 2 number eg('5518727323', '0802783893', '081237833767')  (optional: null)
*/
$pay->info('currency type', 'ammount', 'first name', 'last name', 'email address', 'address 1', 'address 2 (optional: null)', 'city name', 'state name (2 letters abbreviation)', 
		   'zip code', 'country name (2 letters abbreviation)', 'phone 1 Area code', 'phone 1 number ', 'phone 2 Area code', 'phone 2 number');
/*
---------- SAVE PARAMS FOR DONATION -------------------
@param 1  save product information and payment status (default (bool) true)
@param 2  save users informations (default (bool) true)
@param 3  how to handle paypal rendered link arg('return', 'redirect', (array))
---@returrn: 	return the rendered paypal gateway url as string
---@redirect:	redirect users browser to paypal payment gateway
---@array:		return html link tag to user 
			array('id' 	  => 'lid', 					<a href='payapl_gw_url', id='lid' 
				  'class' => 'lclass', 					<a href='payapl_gw_url', id='lid' class='lclass'
				  'link'  => 'click here to donate', 	<a href='payapl_gw_url', id='lid' class='lclass'> click here to donate </a>
				 )
				  
*/
$pay->save(SAVE_USER_DATA, SAVE_PROD_DATA, array('id' => 'lid', 'class' => 'lclas', 'data_id' => 'ldi', 'link' => 'donate to me :(', 'target' => '_black'));
if(!$pay->error)
	echo($pay->success); //no error occured in process
else
	echo($pay->error); //error occured in process

%m00%